#include <ros/ros.h>
#include <pr2_controllers_msgs/JointTrajectoryAction.h>
#include <actionlib/client/simple_action_client.h>


// to be able to use normal trajectory computation
#include <Eigen/Core>
#include "trajectories/TrajectoryG.h"
#include "trajectories/PathG.h"
using namespace std;
using namespace Eigen;


// to be able to use softmotion trajectory computation
#include "softMotion/Sm_Traj.h"
#include "softMotion/softMotion.h"


typedef actionlib::SimpleActionClient<pr2_controllers_msgs::JointTrajectoryAction> TrajClient;

// enum RobotArmError { , yellow, green = 20, blue };
// color col = red;
// int n = blue; // n 

class RobotArm{
public:
  enum ERROR { OK, INVALID_PARAM, INVALID_TRAJ, TRAJECTORY_COMPUTATION_FAILED, NB_ERROR };
  enum SIDE { LEFT, RIGHT, NB_SIDE };
  enum TRAJ_MODE { SOFT_MOTION, GATECH, PATH, NB_MODE };
  RobotArm();
  ~RobotArm();
  void init(int);
  ERROR validateTraj();
  ERROR validateTraj(pr2_controllers_msgs::JointTrajectoryGoal *);
  ERROR computeTrajectory();
  ERROR computeTrajectoryG();
  ERROR computeTrajectoryG(pr2_controllers_msgs::JointTrajectoryGoal *, pr2_controllers_msgs::JointTrajectoryGoal *);
  ERROR computeTrajectorySoftMotion();
  ERROR computeTrajectorySoftMotion(pr2_controllers_msgs::JointTrajectoryGoal *, pr2_controllers_msgs::JointTrajectoryGoal *);
  actionlib::SimpleClientGoalState move_getState();
  void move();
  void move(pr2_controllers_msgs::JointTrajectoryGoal *);
  //pr2_controllers_msgs::JointTrajectoryGoal getgenom2Traj(SIDE);
  pr2_controllers_msgs::JointTrajectoryGoal gettestPath();
  pr2_controllers_msgs::JointTrajectoryGoal getTraj(pr2_controllers_msgs::JointTrajectoryGoal);
  ERROR setTraj(pr2_controllers_msgs::JointTrajectoryGoal *);
  ERROR setTrajMode(RobotArm::TRAJ_MODE);
  void test_Trajectory();
  void test_SoftMotion();
  void test_SoftMotion_Mamoun(pr2_controllers_msgs::JointTrajectoryGoal,int);
  void test_SoftMotion_Mamoun2(pr2_controllers_msgs::JointTrajectoryGoal,int);

private:
  TrajClient* traj_client_;
  SIDE arm_side_;
  TRAJ_MODE traj_mode_;
  pr2_controllers_msgs::JointTrajectoryGoal arm_traj_;
};
