/*/
 * Copyright (c) 2015 CNRS/LAAS
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include "pr2motionStruct.idl"
#include "pr2motion.interface"


component pr2motion {
  version "0.1";
  email "openrobots@laas.fr";
  require "sensor_msgs, pr2_controllers_msgs, pr2_gripper_sensor_msgs, actionlib, actionlib_msgs, eigen3, softMotion-libs, urdf";
  lang "c";
  uses pr2motioninterface;
  
  exception invalid_param{};
  exception not_connected{};
  exception init_not_done{};
  exception unable_to_read_description{};
  exception unknown_error{};
  exception joint_state_unavailable{};
  exception joint_name_unknown{};

  ids {
    // Robot State
    pr2motion::sensor_msgs_jointstate joint_state_msg;
    boolean joint_state_availability;
    // Head Controller State
    pr2motion::pr2_controllers_msgs_jointtrajectorycontrollerstate head_controller_state_msg;
    boolean head_controller_state_availability;

    // GRIPPER
    //Pr2GripperCommandGoal
    double open_position;
    double open_max_effort;
    //Pr2GripperCommandGoal
    double close_position;
    double close_max_effort;
    //#ifndef PR2_SIMU
    // PR2_Gripper_Sensor_Action is not defined in simulation
    //PR2GripperFindContactGoal
    pr2motion::GRIPPER_CONTACT_CONDITIONS findtwo_contact_conditions;
    boolean findtwo_zero_fingertip_sensors;
    //PR2GripperEventDetectorGoal
    pr2motion::GRIPPER_EVENT_DETECTOR event_trigger_conditions;
    double event_acceleration_trigger_magnitude;
    double event_slip_trigger_magnitude;
    //PR2GripperForceServoCommand
    double force_fingertip_force;
    //#endif

    // TORSO
    //    float torso_position;
    /* double torso_min_duration; */
    /* float torso_max_velocity;  */

    // HEAD
    //    pr2motion::HEAD_MODE head_mode;
    // string<128> head_target_frame;
    // double head_target_x;
    // double head_target_y;
    // double head_target_z;

    /* // ARM */
    /* double max_vel; */
    /* double max_acc; */
    /* double max_jerk; */
    double time_slot;
  };

  task main {
    period 100ms;
    codel <start> initMain(out open_position, out open_max_effort, out close_position, out close_max_effort, out findtwo_contact_conditions, out findtwo_zero_fingertip_sensors, out event_trigger_conditions, out event_acceleration_trigger_magnitude, out event_slip_trigger_magnitude, out joint_state_availability) yield routine;
    codel <routine> routineMain(port in joint_state, out joint_state_msg, inout joint_state_availability) yield routine, stop;
    codel <stop> endMain() yield ether;
  };

  activity Init()
  {
    doc "SDI initialisation and pr2 controllers connection initialisation";
    codel <start>initConnect() yield ether;
    throw unable_to_read_description; 
    //    throw left_arm_error, right_arm_error, memory_full;
    task main;
  };
 
/* GRIPPERS related functions */
  
  attribute Gripper_SetOpenGoal(in open_position = 0.09:"max open position",
  			  in open_max_effort = -1.0:"max effort (-1.0 unlimited effort)") {
    doc "Set max open position";
    validate Gripper_SetOpenGoal(local in open_position, local in open_max_effort);
  };
  
  attribute Gripper_GetOpenGoal(out open_position, out open_max_effort) {
    doc "Get max open position";
  };
  
  attribute Gripper_SetCloseGoal(in close_position = 0.08:"max open position",
  			in close_max_effort = -1.0:"max effort (-1.0 unlimited effort)") {
    doc "Set max close position";
    validate Gripper_SetCloseGoal(local in close_position, local in close_max_effort);
  };
  
  attribute Gripper_GetCloseGoal(out close_position,
  			out close_max_effort) {
    doc "Get max close position";
  };

  attribute Gripper_SetFindContactGoal(in findtwo_contact_conditions = pr2motion::GRIPPER_CONTACT_BOTH:"see pr2_gripper_sensor_msgs/PR2GripperFindContactCommand.msg, for now BOTH=0 (both fingers must make contact) LEFT=1 (just left finger) RIGHT=2 (just right finger) EITHER=3 (either)",
  			      in findtwo_zero_fingertip_sensors = TRUE :"true or false") {
    doc "Set find contact goal";
  };
  
  attribute Gripper_GetFindContactGoal(out findtwo_contact_conditions,
						 out findtwo_zero_fingertip_sensors) {
    doc "Get find contact goal";
  };

  
  attribute Gripper_SetEventDetectorGoal(in event_trigger_conditions = pr2motion::GRIPPER_FINGER_SIDE_IMPACT_OR_SLIP_OR_ACC:"see pr2_gripper_sensor_msgs/PR2GripperEventDetectorCommand.msg, for now FINGER_SIDE_IMPACT_OR_ACC = 0 (trigger on either acceleration contact or finger sensor side impact) SLIP_AND_ACC = 1 (trigger once  both slip and acceleration signals occur), FINGER_SIDE_IMPACT_OR_SLIP_OR_ACC = 2 (trigger on either slip, acceleration, or finger sensor side impact),  SLIP = 3 (trigger only on slip information), ACC = 4  (trigger only on acceleration contact information)",
  				in event_acceleration_trigger_magnitude = 4.0:"the amount of acceleration to trigger on (acceleration vector magnitude) Units = m/s^2",
  				in event_slip_trigger_magnitude = .005:"the slip detector gain to trigger on (either finger)")
  {
    doc "Set event detector goal";
  };

  attribute Gripper_GetEventDetectorGoal(out event_trigger_conditions,
						   out event_acceleration_trigger_magnitude,
  				out event_slip_trigger_magnitude)
  {
    doc "Get event detector goal";
  };

  attribute Gripper_SetForceServoGoal(in force_fingertip_force = 10 : "see pr2_gripper_sensor_msgs/PR2GripperForceServoCommand.msg, the amount of fingertip force (in Newtons) to apply. NOTE: the joint will squeeze until each finger reaches this level; values < 0 (opening force) are ignored ; 10 N can crack an egg or crush a soda can ; 15 N can firmly pick up a can of soup.")
  {
    doc "Set force servo goal";
  };

  attribute Gripper_GetForceServoGoal(out force_fingertip_force)
  {
    doc "Get force servo goal";
  };


  // we are on the real robot
  activity Gripper_Operate(in pr2motion::SIDE side = pr2motion::RIGHT:"0= left, 1=right",
					    in pr2motion::GRIPPER_MODE goal_mode = pr2motion::GRIPPER_OPEN:"0=OPEN, 1=CLOSE, 2=GRAB, 3=RELEASE")
  {
    doc "Allow to operate the Gripper";
    codel <start> startOperateGripper(in side, in goal_mode) yield exec, stop, ether; 
    codel <exec> execOperateGripper(in side, in goal_mode, in open_position, in open_max_effort, in close_position, in close_max_effort, in findtwo_contact_conditions, in findtwo_zero_fingertip_sensors, in event_trigger_conditions, in event_acceleration_trigger_magnitude, in event_slip_trigger_magnitude) yield exec, wait, waitcontact, waitopen, waitclose, waitrelease, stop, end, ether;
    codel <wait> waitOperateGripper(in side, in goal_mode) yield wait, exec, stop, end, ether;
    codel <waitcontact> waitcontactOperateGripper(in side, in goal_mode) yield slipservo, wait, stop, end; 
    codel <waitopen> waitopenOperateGripper(in side, in goal_mode) yield waitopen,  wait, stop, end;
    codel <waitclose> waitcloseOperateGripper(in side, in goal_mode) yield waitclose, wait, stop, end;
    codel <waitrelease> waitreleaseOperateGripper(in side, in goal_mode) yield wait, stop, end;
    codel <slipservo> slipservoOperateGripper(in side, in goal_mode) yield wait, stop, end;
    codel <stop> stopOperateGripper(in side, in goal_mode) yield ether;
    codel <end> endOperateGripper(in side, in goal_mode) yield ether;
    throw not_connected, init_not_done, invalid_param, unknown_error;
    task main;    
  };

  function Gripper_Stop(in unsigned long side = 0: "0=left, 1=right")
  {
    doc "Stop Gripper";
    interrupts Gripper_Operate;
  }; 

  activity Torso_Move(in float torso_position = 10.0:"desired torso_position")
  {
  doc "Allow to move the Torso";
  codel <start> startMoveTorso(in torso_position) yield end, ether, wait;
  codel <wait> waitMoveTorso() yield wait, end;
  codel <end> endMoveTorso() yield ether;
  codel <stop> stopMoveTorso() yield ether;
  throw not_connected, init_not_done, invalid_param, unknown_error;
  task main;  
  };
  
  function Torso_Stop()
  {
  doc "Allow to stop the move of the Torso";
  interrupts Torso_Move;
  };

  activity Head_Move(
    in pr2motion::HEAD_MODE head_mode = pr2motion::HEAD_LOOKAT:"pr2motion::HEAD_LOOKAT or HEAD_FOLLOWING",
      in string<HEAD_TARGET_FRAME_LEN> head_target_frame = "base_link":"requested frame",
      in double head_target_x = 0.0:"x",
      in double head_target_y = 0.0:"y",
      in double head_target_z = 0.0:"z")
  {
    doc "Move the Head";
  codel <start> startMoveHead(in head_mode, in head_target_frame, in head_target_x, in head_target_y, in head_target_z) yield end, ether, wait;
  codel <wait> waitMoveHead(in head_mode, port in head_controller_state, out head_controller_state_msg) yield start, wait, end, ether;
  codel <end> endMoveHead() yield ether;
  codel <stop> stopMoveHead() yield ether;
  throw not_connected, init_not_done, invalid_param, unknown_error;
  task main;  
  };
  
  function Head_Stop()
  {
  doc "Allow to stop the move of the Head";
  //interrupts Head_MoveHead;
  interrupts Head_Move;
  };  


/* ARMS related functions */

  activity Arm_Move(in pr2motion::SIDE side = pr2motion::RIGHT:"0= left, 1=right",
			      in pr2motion::TRAJ_MODE traj_mode = pr2motion::TRAJ_SOFTMOTION:"0=soft_motion, 1=gatech, 2=path", in pr2motion::PATH_MODE path_mode = pr2motion::PATH_PORT:"0=port, 1=test")
  {
  doc "Allow to test";
  codel <start> getPathArm(in side, in path_mode, port in traj) yield end, ether, computetraj, checktraj;
  codel <computetraj> computeTrajArm(in side, in traj_mode, in time_slot) yield checktraj, end, ether;
  codel <checktraj> checkTrajArm(in side) yield end, ether, launchmove;
  codel <launchmove> launchMoveArm(in side) yield end, ether, waitmove;
  codel <waitmove> waitMoveArm(in side) yield end, ether, waitmove;
  codel <end> endMoveArm(in side) yield ether;
  codel <stop> stopMoveArm(in side) yield ether;
  throw not_connected, init_not_done, invalid_param, unknown_error;
  task main;  
  };

  /* attribute Arm_SetMax(in max_vel = 0.5:"maximum velocity",  */
  /* 				 in max_acc = 0.5:"maximum acceleration", */
  /* 				 in max_jerk = 0.5:"maximum jerk") { */
  /*   doc "Set max velocity, max acceleration and max jerk"; */
  /*   validate Arm_SetMax(local in max_vel, local in max_acc, local in max_jerk); */
  /*   throw invalid_param; */
  /* }; */

  /* attribute Arm_GetMax(out max_vel, */
  /* 				 out max_acc, */
  /* 				 out max_jerk) { */
  /*   doc "Get max velocity, max acceleration and max jerk"; */
  /* }; */

  attribute Arm_SetT(in time_slot = 0.1:"the time slot in the trajectory") {
    doc "Set time slot of the trajectory";
    validate Arm_SetT(local in time_slot);
    throw invalid_param;
  };

  activity Arm_MoveToQGoal(in pr2motion::SIDE side = pr2motion::RIGHT:"0= left, 1=right", in pr2motion::TRAJ_MODE traj_mode = pr2motion::TRAJ_SOFTMOTION:"0=soft_motion, 1=gatech, 2=path", in double shoulder_pan_joint = 0.0 : "right limits: (-2.135,0.564) left limits:(-0.564,2.088)", in double shoulder_lift_joint = 0.0 : "right limits: (-0.3535,1.2963) left limits: (-0.353,1.2963)", in double upper_arm_roll_joint = 0.0 : "right limits: (-3.75, 0.65) left limits: (-0.65,3.75)", in double elbow_flex_joint = -0.5 : "right limits: (-2.12,-0.15) left limits: (-2.12,-0.15)", in double forearm_roll_joint = 0.0 : "continous joint", in double wrist_flex_joint = -0.2 : "right limits: (-2.0,-0.1) left limits: (-2.0,-0.1)", in double wrist_roll_joint = 0.0 : "continous joint")
  {
    doc "Allow to set a Qgoal";
    codel <start> getQGoal(in side, in joint_state_availability, in joint_state_msg, in shoulder_pan_joint, in shoulder_lift_joint, in upper_arm_roll_joint, in elbow_flex_joint, in forearm_roll_joint, in wrist_flex_joint, in wrist_roll_joint) yield computetraj, end, ether;
    codel <computetraj> computeTrajQGoal(in side, in traj_mode) yield checktraj, end, ether;
    codel <checktraj> checkTrajQGoal(in side) yield end, ether, launchmove;
    codel <launchmove> launchMoveQ(in side) yield end, ether, waitmove;
    codel <waitmove> waitMoveQ(in side) yield end, ether, waitmove;
    codel <end> endMoveQ(in side) yield ether;
    codel <stop> stopMoveQ(in side) yield ether;
    throw not_connected, init_not_done, invalid_param, unknown_error,joint_state_unavailable;
    task main;
  };
  
  function Arm_Stop()
  {
  doc "Allow to stop the move of the Head";
  //interrupts Head_MoveHead;
  interrupts Arm_Move, Arm_MoveToQGoal;
  };  

  activity GetQ(in string joint_name, out double position, out double velocity, out double effort) {
    doc "Allow get robot Q";
    codel <start> getQ(in joint_name,in joint_state_availability, in joint_state_msg, out position, out velocity, out effort) yield end, ether;
    codel <end> endGetQ() yield ether;
    throw joint_state_unavailable,joint_name_unknown;
    task main;
  };
};
